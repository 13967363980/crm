// <auto-generated />
using lsc.Dal;
using lsc.Model.Enume;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace lsc.Dal.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180605092706_createAlltable")]
    partial class createAlltable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("lsc.Model.DistrictInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.Property<int>("Pid");

                    b.HasKey("ID");

                    b.ToTable("Districtinfos");
                });

            modelBuilder.Entity("lsc.Model.EmailResources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(64);

                    b.Property<string>("Password")
                        .HasMaxLength(11);

                    b.Property<string>("Port")
                        .HasMaxLength(6);

                    b.Property<string>("SenderServerIp")
                        .HasMaxLength(64);

                    b.Property<string>("UserName")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("EmailResourcess");
                });

            modelBuilder.Entity("lsc.Model.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("EmailContent")
                        .HasMaxLength(2048);

                    b.Property<string>("Title")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("lsc.Model.EnterCustContacts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Business");

                    b.Property<string>("Department");

                    b.Property<string>("Duties");

                    b.Property<string>("Email");

                    b.Property<int>("EnterCustID");

                    b.Property<string>("Landline");

                    b.Property<string>("Name");

                    b.Property<string>("QQ");

                    b.Property<string>("Rem");

                    b.Property<int>("Sex");

                    b.Property<string>("Telephone");

                    b.Property<string>("WeChart");

                    b.HasKey("ID");

                    b.ToTable("EnterCustContactss");
                });

            modelBuilder.Entity("lsc.Model.EnterCustomer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<string>("Address")
                        .HasMaxLength(256);

                    b.Property<string>("City")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("CreateUserID");

                    b.Property<string>("CustAbstract")
                        .HasMaxLength(1024);

                    b.Property<int>("CustomerType");

                    b.Property<int>("DegreeOfHeat");

                    b.Property<string>("Email")
                        .HasMaxLength(32);

                    b.Property<string>("EnterName")
                        .HasMaxLength(126);

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(32);

                    b.Property<string>("HeatMsg")
                        .HasMaxLength(256);

                    b.Property<int>("HeatTYPE");

                    b.Property<string>("InvoiceMsg")
                        .HasMaxLength(1024);

                    b.Property<bool>("IsHeat");

                    b.Property<string>("Landline");

                    b.Property<int>("Phase");

                    b.Property<string>("Province")
                        .HasMaxLength(32);

                    b.Property<int>("Relationship");

                    b.Property<string>("Rem")
                        .HasMaxLength(256);

                    b.Property<int>("Source");

                    b.Property<int>("State");

                    b.Property<string>("Telephone")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<int>("UserID");

                    b.Property<int>("ValueGrade");

                    b.Property<string>("WebSit")
                        .HasMaxLength(126);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(32);

                    b.HasKey("ID");

                    b.ToTable("EnterCustomers");
                });

            modelBuilder.Entity("lsc.Model.EnterCustPhaseLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("EnterCustomerID");

                    b.Property<int>("Phase");

                    b.Property<string>("Rem");

                    b.Property<int>("UserID");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.ToTable("EnterCustPhaseLogs");
                });

            modelBuilder.Entity("lsc.Model.ModuleInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("ModuleInfos");
                });

            modelBuilder.Entity("lsc.Model.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(126);

                    b.Property<bool>("IsOk");

                    b.Property<string>("ItemIndex")
                        .HasMaxLength(2);

                    b.Property<int>("QuestionsId");

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("lsc.Model.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(126);

                    b.Property<int>("QuestionsType");

                    b.HasKey("Id");

                    b.ToTable("QuestionsDbSet");
                });

            modelBuilder.Entity("lsc.Model.ReceivedPaymentsLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amt");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Rem");

                    b.Property<int>("SalesProjectID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("ReceivedPaymentsLogs");
                });

            modelBuilder.Entity("lsc.Model.SalesProject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("CreateUserID");

                    b.Property<int>("EnterCustomerID");

                    b.Property<int>("HeadID");

                    b.Property<string>("ProjectAbstract");

                    b.Property<double>("ProjectAmt");

                    b.Property<int>("ProjectState");

                    b.Property<DateTime>("ProjectTime");

                    b.Property<int>("ProjectType");

                    b.Property<double>("ReceoverPay");

                    b.Property<DateTime>("ReceoverPayTime");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("SalesProjects");
                });

            modelBuilder.Entity("lsc.Model.SalesProjectStateLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("ProjectState");

                    b.Property<string>("Rem");

                    b.Property<int>("SalesProjectID");

                    b.Property<int>("UserID");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.ToTable("SalesProjectStateLogs");
                });

            modelBuilder.Entity("lsc.Model.SendEmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(64);

                    b.Property<int>("EmailTempId");

                    b.Property<bool>("IsRead");

                    b.Property<bool>("IsSend");

                    b.Property<bool>("IsSendOk");

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.Property<int>("SendEmailTaskId");

                    b.HasKey("Id");

                    b.ToTable("SendEmailLogs");
                });

            modelBuilder.Entity("lsc.Model.SendEmailTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("EmailTempId");

                    b.Property<string>("TaskName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SendEmailTasks");
                });

            modelBuilder.Entity("lsc.Model.TargetEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("TargetEmails");
                });

            modelBuilder.Entity("lsc.Model.UserAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password")
                        .HasMaxLength(256);

                    b.Property<int>("UserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(32);

                    b.HasKey("ID");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("lsc.Model.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(500);

                    b.Property<bool>("IsOk");

                    b.Property<int>("LogId");

                    b.Property<int>("OptionId");

                    b.Property<int>("QuestionId");

                    b.Property<double>("Score");

                    b.HasKey("Id");

                    b.ToTable("UserAnswer");
                });

            modelBuilder.Entity("lsc.Model.UserAnswerLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<double>("Duration");

                    b.Property<double>("TotalScore");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserAnswerLog");
                });

            modelBuilder.Entity("lsc.Model.UserInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.Property<int>("RoleID");

                    b.Property<int>("State");

                    b.Property<double>("TargetAmt");

                    b.Property<string>("TelPhone")
                        .HasMaxLength(11);

                    b.Property<string>("UserName")
                        .HasMaxLength(32);

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("lsc.Model.UserQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LogId");

                    b.Property<int>("QIndex");

                    b.Property<int>("QuestionsId");

                    b.HasKey("Id");

                    b.ToTable("UserQuestions");
                });

            modelBuilder.Entity("lsc.Model.UserRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName")
                        .HasMaxLength(32);

                    b.Property<int>("State");

                    b.HasKey("ID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("lsc.Model.UserRoleJurisdiction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsAdd");

                    b.Property<bool>("IsAssignment");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsEdit");

                    b.Property<bool>("IsQuery");

                    b.Property<int>("ModuleID");

                    b.Property<int>("UserRoleID");

                    b.HasKey("ID");

                    b.ToTable("UserRoleJurisdictions");
                });

            modelBuilder.Entity("lsc.Model.WorkPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("EnterCustID");

                    b.Property<string>("PlanContent");

                    b.Property<DateTime>("PlanTime");

                    b.Property<int>("UserID");

                    b.Property<int>("WorkPlanState");

                    b.HasKey("ID");

                    b.ToTable("WorkPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
